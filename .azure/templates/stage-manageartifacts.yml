parameters:
  - name: dependsOn
    type: object
    default: []
  - name: acrName
    type: string
  - name: acrLogin
    type: string
  - name: release
    type: boolean
    default: false
  - name: imageFullPathWithShaOrTag
    type: string
  

stages:
- stage: ManageArtifacts
  dependsOn:
  - ${{ each stage in parameters.dependsOn }}:
    - ${{ stage }}
  variables: 
    IMAGE: ${{ parameters.imageFullPathWithShaOrTag }}
  jobs:
  - job: LoginToAzure
    steps:
    - script: az login --identity
      displayName: 'Authenticate to Azure using managed identity'
    - script: podman login ${ACR_NAME}.azurecr.io -u ${ACR_LOGIN} -p $(az acr login -n ${ACR_NAME} --expose-token -o tsv --query accessToken)
      env:
        ACR_NAME: ${{ parameters.acrName }}
        ACR_LOGIN: ${{ parameters.acrLogin }}
      displayName: 'Authenticate to ACR'
  - ${{ if eq(parameters.release, false) }}:
    - job: TagLocalImageAndPush
      dependsOn: LoginToAzure
      steps:
      - script: |
          #!/bin/bash
          set -xeu -o pipefail
          if [[ $IMAGE == *"sha256:"* ]]; then
            IMAGE=$(echo $IMAGE | sed "s/^.*://")
          fi
          IMAGE_REMOTE_REGISTRY=$(podman image inspect --format '{{index .RepoTags 0}}' $IMAGE |\
            sed "s/^localhost/${ACR_NAME}.azurecr.io/")
          podman tag $IMAGE $IMAGE_REMOTE_REGISTRY
          podman push $IMAGE_REMOTE_REGISTRY
        env:
          ACR_NAME: ${{ parameters.acrName }}
        displayName: 'Tag local image and push'
  - ${{ if eq(parameters.release, true) }}:
    - job: PullImageReleaseAndPush
      dependsOn: LoginToAzure
      steps:
      # Steps to enable push from pipeline
      # https://stackoverflow.com/a/62997038
      # and grant for project build service account
      # (${PROJECT_NAME} Build Service)
      # permissions to contribute and create tags
      - checkout: self
        fetchFilter: tree:0
        persistCredentials: true
        displayName: 'Clone repository and store credentials'
      - script: |
          #!/bin/bash

          set -xeu -o pipefail
          if [[ "$(Build.SourceBranch)" != "refs/heads/master" ]]; then 
            echo "ERROR: You can release only from master branch. Run pipeline from correct branch!"
            exit 101
          fi
          LATEST_TAG_CHANGELOG=$(parse-changelog | jq -r 'to_entries | map(.key) | .[1]')
          if ! [[ $LATEST_TAG_CHANGELOG =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "ERROR: Invalid SemVer: ${LATEST_TAG_CHANGELOG}. Check your CHANGELOG.md file!"
              exit 102
          else
              echo "Valid SemVer: ${LATEST_TAG_CHANGELOG}"
          fi
          mapfile -t TAG_LIST < <( git tag --sort=-v:refname )
          echo "Following tags were found in repository: ${TAG_LIST[@]}"
          if echo "${TAG_LIST[@]}" | grep -w -q "$LATEST_TAG_CHANGELOG"; then
              echo "ERROR: Tag already exists in git repo. Check your CHANGELOG.md file!"
              exit 103
          else
              echo "Valid tag: ${LATEST_TAG_CHANGELOG} is unique across repository"
          fi
          podman pull "$IMAGE"
          IMAGE_COMMIT_ID=$(podman image inspect --format '{{index .Labels.COMMIT_ID }}' "$IMAGE")
          if [[ -z "${IMAGE_COMMIT_ID}" ]]; then
              echo "ERROR: IMAGE_COMMIT_ID label is empty or not set. Check your image!"
              exit 104
          fi
          if [[ $IMAGE == *"sha256:"* ]]; then
              IMAGE=$(echo $IMAGE | sed "s/^.*://")
          fi
          IMAGE_PATH_NO_TAG=$(podman image inspect --format '{{index .RepoTags 0}}' "$IMAGE" |\
            sed "s/:.*$//")
          podman tag "$IMAGE" "${IMAGE_PATH_NO_TAG}:${LATEST_TAG_CHANGELOG}"
          git config --global user.email "azuredevops-bot@thinkbox.pl"
          git config --global user.name "AzureDevOps Bot"
          git tag -a ${LATEST_TAG_CHANGELOG} ${IMAGE_COMMIT_ID} -m "Version ${LATEST_TAG_CHANGELOG}"
          git push --tags
          podman push "${IMAGE_PATH_NO_TAG}:${LATEST_TAG_CHANGELOG}"
        env:
          ACR_NAME: ${{ parameters.acrName }}
        displayName: 'Pull image, release and push'
